# https://circleci.com/docs/2.0/language-ruby/

version: 2.1 # Use 2.1 to enable using orbs and other features.

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/using-orbs/
orbs:
  ruby: circleci/ruby@1.1.1
  node: circleci/node@3.0

# Global variables
parameters:
  bundle_jobs:
    type: integer
    default: 3
  bundle_path:
    type: string
    default: vendor/bundle
  bundle_retry:
    type: integer
    default: 2
  postgres_database:
    type: string
    default: task_roller_test
  postgres_username:
    type: string
    default: postgres-user
  postgres_password:
    type: string
    default: pass123
  postgres_version:
    type: string
    default: '12.3'
  ruby_version:
    type: string
    default: '2.7.2'

commands:
  # use the node orb to install our packages
  # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
  # learn more: https://circleci.com/docs/2.0/caching/
  lint_ruby_code:
    description: 'Lint Ruby Code using Rubocop'
    steps:
      - run:
          name: Lint Ruby Code
          command: |
            bundle exec rubocop \
            --require rubocop/formatter/junit_formatter \
            --format RuboCop::Formatter::JUnitFormatter \
            --out /tmp/test-results/rubocop/results.xml
      - store_test_results:
          path: /tmp/test-results/rubocop
      - store_artifacts:
          destination: test-results
          path: /tmp/test-results
  lint_scss_code:
    description: 'Lint SCSS Code using scss-lint'
    steps:
      - run:
          name: Lint SCSS Code
          command: |
            mkdir -p /tmp/test-results/scss-lint
            bundle exec scss-lint \
            --require=scss_lint_reporter_junit --format=JUnit \
            --config=./.scss-lint.yml \
            --out=/tmp/test-results/scss-lint/results.xml
      - store_test_results:
          path: /tmp/test-results/scss-lint
      - store_artifacts:
          destination: test-results
          path: /tmp/test-results
  install_node:
    parameters:
      version:
        type: string
        default: '12.18.0'
    steps:
      - node/install:
          install-yarn: true
          node-version: <<parameters.version>>
  install_node_packages:
    description: 'Install Node Packages using Yarn'
    parameters:
      cache_folder:
        type: string
        default: tmp/cache/yarn
      cache_key:
        type: string
        default: yarn-packages-v1
    steps:
      - restore_cache:
          name: Restore Node Packages Cache
          keys:
            - <<parameters.cache_key>>-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install Node Packages
          command: yarn install --production --cache-folder <<parameters.cache_folder>>
      - save_cache:
          name: Cache Node Packages
          paths:
            - <<parameters.cache_folder>>
          key: <<parameters.cache_key>>-{{ .Branch }}-{{ checksum "yarn.lock" }}
  install_ruby_gems:
    description: 'Install Ruby Gems using cache'
    parameters:
      bundler_version:
        description: 'Configure which version of bundler to install and utilize'
        default: '2.1.4'
        type: string
    steps:
      - restore_cache:
          name: Restore Ruby Gems Cache
          keys:
            - ruby-gems-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Ruby Gems
          command: |
            if ! echo $(bundle version) | grep -q <<parameters.bundler_version>>; then
              echo "Installing bundler <<parameters.bundler_version>>"
              gem install bundler:<<parameters.bundler_version>>
            else
              echo "bundler <<parameters.bundler_version>> is already installed."
            fi
            bundle install
      - save_cache:
          name: Cache Ruby Gems
          paths:
            - << pipeline.parameters.bundle_path >>
          key: ruby-gems-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}

# Re-usable defaults
default_environment: &default_environment
  environment:
    BUNDLE_JOBS: <<pipeline.parameters.bundle_jobs>>
    BUNDLE_PATH: <<pipeline.parameters.bundle_path>>
    BUNDLE_RETRY: <<pipeline.parameters.bundle_retry>>
    PG_USERNAME: <<pipeline.parameters.postgres_username>>
    PG_PASSWORD: <<pipeline.parameters.postgres_password>>
    RAILS_ENV: test

jobs:
  build: # our first job, named "build"
    docker:
      - image: cimg/ruby:<<pipeline.parameters.ruby_version>>-node
    <<: *default_environment
    steps:
      - checkout # pull down our git code.
      - install_ruby_gems
      - install_node
      - install_node_packages

  lint:
    parallelism: 1
    docker:
      - image: cimg/ruby:<<pipeline.parameters.ruby_version>>-node
    <<: *default_environment
    steps:
      - checkout # pull down our git code.
      - install_ruby_gems
      - install_node
      - install_node_packages
      - lint_ruby_code
      - lint_scss_code

  test:  # our next job, called "test"
    # we run "parallel job containers" to enable speeding up our tests;
    # this splits our tests across multiple containers.
    parallelism: 2
    docker:
      - image: cimg/ruby:<<pipeline.parameters.ruby_version>>-node
        environment:
          PGHOST: 127.0.0.1
      - image: circleci/postgres:<<pipeline.parameters.postgres_version>>
        environment:
          POSTGRES_DB: <<pipeline.parameters.postgres_database>>
          POSTGRES_USER: <<pipeline.parameters.postgres_username>>
          POSTGRES_PASSWORD: <<pipeline.parameters.postgres_password>>
    <<: *default_environment
    # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout
      - install_ruby_gems
      - install_node
      - install_node_packages
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      - run:
          name: Wait For Database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Setup Database
          command: bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - ruby/rspec-test

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 3
  build_and_test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - build         # Run build first.
      - test:         # Then run test,
          requires:   # Test requires that build passes for it to run.
            - build   # Finally, run the build job.
      - lint:
          requires:
            - build
